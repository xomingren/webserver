// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc_example.proto

#include "rpc_example.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace rpc_example {
PROTOBUF_CONSTEXPR RpcRequest::RpcRequest(
    ::_pbi::ConstantInitialized)
  : params_()
  , _params_cached_byte_size_(0)
  , howmanyparams_(0){}
struct RpcRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RpcRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RpcRequestDefaultTypeInternal() {}
  union {
    RpcRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RpcRequestDefaultTypeInternal _RpcRequest_default_instance_;
PROTOBUF_CONSTEXPR RpcResponse::RpcResponse(
    ::_pbi::ConstantInitialized)
  : _oneof_case_{}{}
struct RpcResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RpcResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RpcResponseDefaultTypeInternal() {}
  union {
    RpcResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RpcResponseDefaultTypeInternal _RpcResponse_default_instance_;
}  // namespace rpc_example
static ::_pb::Metadata file_level_metadata_rpc_5fexample_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_rpc_5fexample_2eproto = nullptr;
static const ::_pb::ServiceDescriptor* file_level_service_descriptors_rpc_5fexample_2eproto[2];

const uint32_t TableStruct_rpc_5fexample_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rpc_example::RpcRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rpc_example::RpcRequest, howmanyparams_),
  PROTOBUF_FIELD_OFFSET(::rpc_example::RpcRequest, params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rpc_example::RpcResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::rpc_example::RpcResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::rpc_example::RpcResponse, optional_solved_),
  PROTOBUF_FIELD_OFFSET(::rpc_example::RpcResponse, optional_result_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::rpc_example::RpcRequest)},
  { 8, -1, -1, sizeof(::rpc_example::RpcResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::rpc_example::_RpcRequest_default_instance_._instance,
  &::rpc_example::_RpcResponse_default_instance_._instance,
};

const char descriptor_table_protodef_rpc_5fexample_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021rpc_example.proto\022\013rpc_example\"3\n\nRpcR"
  "equest\022\025\n\rhowmanyparams\030\002 \001(\005\022\016\n\006params\030"
  "\003 \003(\005\"W\n\013RpcResponse\022\020\n\006solved\030\001 \001(\010H\000\022\020"
  "\n\006result\030\002 \001(\005H\001B\021\n\017optional_solvedB\021\n\017o"
  "ptional_result2J\n\016RpcService_add\0228\n\003add\022"
  "\027.rpc_example.RpcRequest\032\030.rpc_example.R"
  "pcResponse2`\n\031RpcService_multiplication\022"
  "C\n\016multiplication\022\027.rpc_example.RpcReque"
  "st\032\030.rpc_example.RpcResponseB\003\200\001\001b\006proto"
  "3"
  ;
static ::_pbi::once_flag descriptor_table_rpc_5fexample_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_rpc_5fexample_2eproto = {
    false, false, 361, descriptor_table_protodef_rpc_5fexample_2eproto,
    "rpc_example.proto",
    &descriptor_table_rpc_5fexample_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_rpc_5fexample_2eproto::offsets,
    file_level_metadata_rpc_5fexample_2eproto, file_level_enum_descriptors_rpc_5fexample_2eproto,
    file_level_service_descriptors_rpc_5fexample_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_rpc_5fexample_2eproto_getter() {
  return &descriptor_table_rpc_5fexample_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_rpc_5fexample_2eproto(&descriptor_table_rpc_5fexample_2eproto);
namespace rpc_example {

// ===================================================================

class RpcRequest::_Internal {
 public:
};

RpcRequest::RpcRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  params_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:rpc_example.RpcRequest)
}
RpcRequest::RpcRequest(const RpcRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      params_(from.params_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  howmanyparams_ = from.howmanyparams_;
  // @@protoc_insertion_point(copy_constructor:rpc_example.RpcRequest)
}

inline void RpcRequest::SharedCtor() {
howmanyparams_ = 0;
}

RpcRequest::~RpcRequest() {
  // @@protoc_insertion_point(destructor:rpc_example.RpcRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RpcRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RpcRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RpcRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc_example.RpcRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  params_.Clear();
  howmanyparams_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RpcRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 howmanyparams = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          howmanyparams_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 params = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_params(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_params(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RpcRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc_example.RpcRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 howmanyparams = 2;
  if (this->_internal_howmanyparams() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_howmanyparams(), target);
  }

  // repeated int32 params = 3;
  {
    int byte_size = _params_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_params(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc_example.RpcRequest)
  return target;
}

size_t RpcRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpc_example.RpcRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 params = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->params_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _params_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 howmanyparams = 2;
  if (this->_internal_howmanyparams() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_howmanyparams());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RpcRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RpcRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RpcRequest::GetClassData() const { return &_class_data_; }

void RpcRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RpcRequest *>(to)->MergeFrom(
      static_cast<const RpcRequest &>(from));
}


void RpcRequest::MergeFrom(const RpcRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpc_example.RpcRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  params_.MergeFrom(from.params_);
  if (from._internal_howmanyparams() != 0) {
    _internal_set_howmanyparams(from._internal_howmanyparams());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RpcRequest::CopyFrom(const RpcRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc_example.RpcRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcRequest::IsInitialized() const {
  return true;
}

void RpcRequest::InternalSwap(RpcRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  params_.InternalSwap(&other->params_);
  swap(howmanyparams_, other->howmanyparams_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RpcRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rpc_5fexample_2eproto_getter, &descriptor_table_rpc_5fexample_2eproto_once,
      file_level_metadata_rpc_5fexample_2eproto[0]);
}

// ===================================================================

class RpcResponse::_Internal {
 public:
};

RpcResponse::RpcResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:rpc_example.RpcResponse)
}
RpcResponse::RpcResponse(const RpcResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_optional_solved();
  switch (from.optional_solved_case()) {
    case kSolved: {
      _internal_set_solved(from._internal_solved());
      break;
    }
    case OPTIONAL_SOLVED_NOT_SET: {
      break;
    }
  }
  clear_has_optional_result();
  switch (from.optional_result_case()) {
    case kResult: {
      _internal_set_result(from._internal_result());
      break;
    }
    case OPTIONAL_RESULT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:rpc_example.RpcResponse)
}

inline void RpcResponse::SharedCtor() {
clear_has_optional_solved();
clear_has_optional_result();
}

RpcResponse::~RpcResponse() {
  // @@protoc_insertion_point(destructor:rpc_example.RpcResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RpcResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_optional_solved()) {
    clear_optional_solved();
  }
  if (has_optional_result()) {
    clear_optional_result();
  }
}

void RpcResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RpcResponse::clear_optional_solved() {
// @@protoc_insertion_point(one_of_clear_start:rpc_example.RpcResponse)
  switch (optional_solved_case()) {
    case kSolved: {
      // No need to clear
      break;
    }
    case OPTIONAL_SOLVED_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OPTIONAL_SOLVED_NOT_SET;
}

void RpcResponse::clear_optional_result() {
// @@protoc_insertion_point(one_of_clear_start:rpc_example.RpcResponse)
  switch (optional_result_case()) {
    case kResult: {
      // No need to clear
      break;
    }
    case OPTIONAL_RESULT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = OPTIONAL_RESULT_NOT_SET;
}


void RpcResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc_example.RpcResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_optional_solved();
  clear_optional_result();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RpcResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool solved = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _internal_set_solved(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _internal_set_result(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RpcResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc_example.RpcResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool solved = 1;
  if (_internal_has_solved()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_solved(), target);
  }

  // int32 result = 2;
  if (_internal_has_result()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc_example.RpcResponse)
  return target;
}

size_t RpcResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpc_example.RpcResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (optional_solved_case()) {
    // bool solved = 1;
    case kSolved: {
      total_size += 1 + 1;
      break;
    }
    case OPTIONAL_SOLVED_NOT_SET: {
      break;
    }
  }
  switch (optional_result_case()) {
    // int32 result = 2;
    case kResult: {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_result());
      break;
    }
    case OPTIONAL_RESULT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RpcResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RpcResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RpcResponse::GetClassData() const { return &_class_data_; }

void RpcResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RpcResponse *>(to)->MergeFrom(
      static_cast<const RpcResponse &>(from));
}


void RpcResponse::MergeFrom(const RpcResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpc_example.RpcResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.optional_solved_case()) {
    case kSolved: {
      _internal_set_solved(from._internal_solved());
      break;
    }
    case OPTIONAL_SOLVED_NOT_SET: {
      break;
    }
  }
  switch (from.optional_result_case()) {
    case kResult: {
      _internal_set_result(from._internal_result());
      break;
    }
    case OPTIONAL_RESULT_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RpcResponse::CopyFrom(const RpcResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc_example.RpcResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcResponse::IsInitialized() const {
  return true;
}

void RpcResponse::InternalSwap(RpcResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(optional_solved_, other->optional_solved_);
  swap(optional_result_, other->optional_result_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
}

::PROTOBUF_NAMESPACE_ID::Metadata RpcResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rpc_5fexample_2eproto_getter, &descriptor_table_rpc_5fexample_2eproto_once,
      file_level_metadata_rpc_5fexample_2eproto[1]);
}

// ===================================================================

RpcService_add::~RpcService_add() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* RpcService_add::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rpc_5fexample_2eproto);
  return file_level_service_descriptors_rpc_5fexample_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* RpcService_add::GetDescriptor() {
  return descriptor();
}

void RpcService_add::add(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::rpc_example::RpcRequest*,
                         ::rpc_example::RpcResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method add() not implemented.");
  done->Run();
}

void RpcService_add::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_rpc_5fexample_2eproto[0]);
  switch(method->index()) {
    case 0:
      add(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::rpc_example::RpcRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::rpc_example::RpcResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& RpcService_add::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::rpc_example::RpcRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& RpcService_add::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::rpc_example::RpcResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

RpcService_add_Stub::RpcService_add_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
RpcService_add_Stub::RpcService_add_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
RpcService_add_Stub::~RpcService_add_Stub() {
  if (owns_channel_) delete channel_;
}

void RpcService_add_Stub::add(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::rpc_example::RpcRequest* request,
                              ::rpc_example::RpcResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
// ===================================================================

RpcService_multiplication::~RpcService_multiplication() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* RpcService_multiplication::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rpc_5fexample_2eproto);
  return file_level_service_descriptors_rpc_5fexample_2eproto[1];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* RpcService_multiplication::GetDescriptor() {
  return descriptor();
}

void RpcService_multiplication::multiplication(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::rpc_example::RpcRequest*,
                         ::rpc_example::RpcResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method multiplication() not implemented.");
  done->Run();
}

void RpcService_multiplication::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_rpc_5fexample_2eproto[1]);
  switch(method->index()) {
    case 0:
      multiplication(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::rpc_example::RpcRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::rpc_example::RpcResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& RpcService_multiplication::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::rpc_example::RpcRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& RpcService_multiplication::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::rpc_example::RpcResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

RpcService_multiplication_Stub::RpcService_multiplication_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
RpcService_multiplication_Stub::RpcService_multiplication_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
RpcService_multiplication_Stub::~RpcService_multiplication_Stub() {
  if (owns_channel_) delete channel_;
}

void RpcService_multiplication_Stub::multiplication(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::rpc_example::RpcRequest* request,
                              ::rpc_example::RpcResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace rpc_example
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::rpc_example::RpcRequest*
Arena::CreateMaybeMessage< ::rpc_example::RpcRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rpc_example::RpcRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::rpc_example::RpcResponse*
Arena::CreateMaybeMessage< ::rpc_example::RpcResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rpc_example::RpcResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpcservice.proto

#include "rpcservice.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace tiny_muduo_rpc {
PROTOBUF_CONSTEXPR ListRpcRequest::ListRpcRequest(
    ::_pbi::ConstantInitialized)
  : _oneof_case_{}{}
struct ListRpcRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListRpcRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListRpcRequestDefaultTypeInternal() {}
  union {
    ListRpcRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListRpcRequestDefaultTypeInternal _ListRpcRequest_default_instance_;
PROTOBUF_CONSTEXPR ListRpcResponse::ListRpcResponse(
    ::_pbi::ConstantInitialized)
  : service_name_()
  , method_name_()
  , error_(0)
{}
struct ListRpcResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListRpcResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListRpcResponseDefaultTypeInternal() {}
  union {
    ListRpcResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListRpcResponseDefaultTypeInternal _ListRpcResponse_default_instance_;
PROTOBUF_CONSTEXPR GetServiceRequest::GetServiceRequest(
    ::_pbi::ConstantInitialized)
  : service_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct GetServiceRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetServiceRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetServiceRequestDefaultTypeInternal() {}
  union {
    GetServiceRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetServiceRequestDefaultTypeInternal _GetServiceRequest_default_instance_;
PROTOBUF_CONSTEXPR GetServiceResponse::GetServiceResponse(
    ::_pbi::ConstantInitialized)
  : proto_file_()
  , proto_file_name_()
  , error_(0)
{}
struct GetServiceResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetServiceResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetServiceResponseDefaultTypeInternal() {}
  union {
    GetServiceResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetServiceResponseDefaultTypeInternal _GetServiceResponse_default_instance_;
}  // namespace tiny_muduo_rpc
static ::_pb::Metadata file_level_metadata_rpcservice_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_rpcservice_2eproto = nullptr;
static const ::_pb::ServiceDescriptor* file_level_service_descriptors_rpcservice_2eproto[1];

const uint32_t TableStruct_rpcservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tiny_muduo_rpc::ListRpcRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::tiny_muduo_rpc::ListRpcRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::tiny_muduo_rpc::ListRpcRequest, optional_service_name_),
  PROTOBUF_FIELD_OFFSET(::tiny_muduo_rpc::ListRpcRequest, optional_list_method_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tiny_muduo_rpc::ListRpcResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tiny_muduo_rpc::ListRpcResponse, error_),
  PROTOBUF_FIELD_OFFSET(::tiny_muduo_rpc::ListRpcResponse, service_name_),
  PROTOBUF_FIELD_OFFSET(::tiny_muduo_rpc::ListRpcResponse, method_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tiny_muduo_rpc::GetServiceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tiny_muduo_rpc::GetServiceRequest, service_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tiny_muduo_rpc::GetServiceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tiny_muduo_rpc::GetServiceResponse, error_),
  PROTOBUF_FIELD_OFFSET(::tiny_muduo_rpc::GetServiceResponse, proto_file_),
  PROTOBUF_FIELD_OFFSET(::tiny_muduo_rpc::GetServiceResponse, proto_file_name_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::tiny_muduo_rpc::ListRpcRequest)},
  { 10, -1, -1, sizeof(::tiny_muduo_rpc::ListRpcResponse)},
  { 19, -1, -1, sizeof(::tiny_muduo_rpc::GetServiceRequest)},
  { 26, -1, -1, sizeof(::tiny_muduo_rpc::GetServiceResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::tiny_muduo_rpc::_ListRpcRequest_default_instance_._instance,
  &::tiny_muduo_rpc::_ListRpcResponse_default_instance_._instance,
  &::tiny_muduo_rpc::_GetServiceRequest_default_instance_._instance,
  &::tiny_muduo_rpc::_GetServiceResponse_default_instance_._instance,
};

const char descriptor_table_protodef_rpcservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020rpcservice.proto\022\016tiny_muduo_rpc\032\trpc."
  "proto\"p\n\016ListRpcRequest\022\026\n\014service_name\030"
  "\001 \001(\tH\000\022\025\n\013list_method\030\002 \001(\010H\001B\027\n\025option"
  "al_service_nameB\026\n\024optional_list_method\""
  "f\n\017ListRpcResponse\022(\n\005error\030\001 \001(\0162\031.tiny"
  "_muduo_rpc.ErrorCode\022\024\n\014service_name\030\002 \003"
  "(\t\022\023\n\013method_name\030\003 \003(\t\")\n\021GetServiceReq"
  "uest\022\024\n\014service_name\030\001 \001(\t\"k\n\022GetService"
  "Response\022(\n\005error\030\001 \001(\0162\031.tiny_muduo_rpc"
  ".ErrorCode\022\022\n\nproto_file\030\002 \003(\t\022\027\n\017proto_"
  "file_name\030\003 \003(\t2\255\001\n\nRpcService\022J\n\007listRp"
  "c\022\036.tiny_muduo_rpc.ListRpcRequest\032\037.tiny"
  "_muduo_rpc.ListRpcResponse\022S\n\ngetService"
  "\022!.tiny_muduo_rpc.GetServiceRequest\032\".ti"
  "ny_muduo_rpc.GetServiceResponseB\003\200\001\001b\006pr"
  "oto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_rpcservice_2eproto_deps[1] = {
  &::descriptor_table_rpc_2eproto,
};
static ::_pbi::once_flag descriptor_table_rpcservice_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_rpcservice_2eproto = {
    false, false, 604, descriptor_table_protodef_rpcservice_2eproto,
    "rpcservice.proto",
    &descriptor_table_rpcservice_2eproto_once, descriptor_table_rpcservice_2eproto_deps, 1, 4,
    schemas, file_default_instances, TableStruct_rpcservice_2eproto::offsets,
    file_level_metadata_rpcservice_2eproto, file_level_enum_descriptors_rpcservice_2eproto,
    file_level_service_descriptors_rpcservice_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_rpcservice_2eproto_getter() {
  return &descriptor_table_rpcservice_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_rpcservice_2eproto(&descriptor_table_rpcservice_2eproto);
namespace tiny_muduo_rpc {

// ===================================================================

class ListRpcRequest::_Internal {
 public:
};

ListRpcRequest::ListRpcRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:tiny_muduo_rpc.ListRpcRequest)
}
ListRpcRequest::ListRpcRequest(const ListRpcRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_optional_service_name();
  switch (from.optional_service_name_case()) {
    case kServiceName: {
      _internal_set_service_name(from._internal_service_name());
      break;
    }
    case OPTIONAL_SERVICE_NAME_NOT_SET: {
      break;
    }
  }
  clear_has_optional_list_method();
  switch (from.optional_list_method_case()) {
    case kListMethod: {
      _internal_set_list_method(from._internal_list_method());
      break;
    }
    case OPTIONAL_LIST_METHOD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tiny_muduo_rpc.ListRpcRequest)
}

inline void ListRpcRequest::SharedCtor() {
clear_has_optional_service_name();
clear_has_optional_list_method();
}

ListRpcRequest::~ListRpcRequest() {
  // @@protoc_insertion_point(destructor:tiny_muduo_rpc.ListRpcRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListRpcRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_optional_service_name()) {
    clear_optional_service_name();
  }
  if (has_optional_list_method()) {
    clear_optional_list_method();
  }
}

void ListRpcRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListRpcRequest::clear_optional_service_name() {
// @@protoc_insertion_point(one_of_clear_start:tiny_muduo_rpc.ListRpcRequest)
  switch (optional_service_name_case()) {
    case kServiceName: {
      optional_service_name_.service_name_.Destroy();
      break;
    }
    case OPTIONAL_SERVICE_NAME_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OPTIONAL_SERVICE_NAME_NOT_SET;
}

void ListRpcRequest::clear_optional_list_method() {
// @@protoc_insertion_point(one_of_clear_start:tiny_muduo_rpc.ListRpcRequest)
  switch (optional_list_method_case()) {
    case kListMethod: {
      // No need to clear
      break;
    }
    case OPTIONAL_LIST_METHOD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = OPTIONAL_LIST_METHOD_NOT_SET;
}


void ListRpcRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tiny_muduo_rpc.ListRpcRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_optional_service_name();
  clear_optional_list_method();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListRpcRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string service_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_service_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tiny_muduo_rpc.ListRpcRequest.service_name"));
        } else
          goto handle_unusual;
        continue;
      // bool list_method = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _internal_set_list_method(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListRpcRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tiny_muduo_rpc.ListRpcRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string service_name = 1;
  if (_internal_has_service_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service_name().data(), static_cast<int>(this->_internal_service_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tiny_muduo_rpc.ListRpcRequest.service_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_service_name(), target);
  }

  // bool list_method = 2;
  if (_internal_has_list_method()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_list_method(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tiny_muduo_rpc.ListRpcRequest)
  return target;
}

size_t ListRpcRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tiny_muduo_rpc.ListRpcRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (optional_service_name_case()) {
    // string service_name = 1;
    case kServiceName: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_service_name());
      break;
    }
    case OPTIONAL_SERVICE_NAME_NOT_SET: {
      break;
    }
  }
  switch (optional_list_method_case()) {
    // bool list_method = 2;
    case kListMethod: {
      total_size += 1 + 1;
      break;
    }
    case OPTIONAL_LIST_METHOD_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListRpcRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListRpcRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListRpcRequest::GetClassData() const { return &_class_data_; }

void ListRpcRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListRpcRequest *>(to)->MergeFrom(
      static_cast<const ListRpcRequest &>(from));
}


void ListRpcRequest::MergeFrom(const ListRpcRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tiny_muduo_rpc.ListRpcRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.optional_service_name_case()) {
    case kServiceName: {
      _internal_set_service_name(from._internal_service_name());
      break;
    }
    case OPTIONAL_SERVICE_NAME_NOT_SET: {
      break;
    }
  }
  switch (from.optional_list_method_case()) {
    case kListMethod: {
      _internal_set_list_method(from._internal_list_method());
      break;
    }
    case OPTIONAL_LIST_METHOD_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListRpcRequest::CopyFrom(const ListRpcRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tiny_muduo_rpc.ListRpcRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListRpcRequest::IsInitialized() const {
  return true;
}

void ListRpcRequest::InternalSwap(ListRpcRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(optional_service_name_, other->optional_service_name_);
  swap(optional_list_method_, other->optional_list_method_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListRpcRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rpcservice_2eproto_getter, &descriptor_table_rpcservice_2eproto_once,
      file_level_metadata_rpcservice_2eproto[0]);
}

// ===================================================================

class ListRpcResponse::_Internal {
 public:
};

ListRpcResponse::ListRpcResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  service_name_(arena),
  method_name_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:tiny_muduo_rpc.ListRpcResponse)
}
ListRpcResponse::ListRpcResponse(const ListRpcResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      service_name_(from.service_name_),
      method_name_(from.method_name_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  error_ = from.error_;
  // @@protoc_insertion_point(copy_constructor:tiny_muduo_rpc.ListRpcResponse)
}

inline void ListRpcResponse::SharedCtor() {
error_ = 0;
}

ListRpcResponse::~ListRpcResponse() {
  // @@protoc_insertion_point(destructor:tiny_muduo_rpc.ListRpcResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListRpcResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ListRpcResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListRpcResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tiny_muduo_rpc.ListRpcResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  service_name_.Clear();
  method_name_.Clear();
  error_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListRpcResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tiny_muduo_rpc.ErrorCode error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_error(static_cast<::tiny_muduo_rpc::ErrorCode>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated string service_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_service_name();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "tiny_muduo_rpc.ListRpcResponse.service_name"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string method_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_method_name();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "tiny_muduo_rpc.ListRpcResponse.method_name"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListRpcResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tiny_muduo_rpc.ListRpcResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tiny_muduo_rpc.ErrorCode error = 1;
  if (this->_internal_error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_error(), target);
  }

  // repeated string service_name = 2;
  for (int i = 0, n = this->_internal_service_name_size(); i < n; i++) {
    const auto& s = this->_internal_service_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tiny_muduo_rpc.ListRpcResponse.service_name");
    target = stream->WriteString(2, s, target);
  }

  // repeated string method_name = 3;
  for (int i = 0, n = this->_internal_method_name_size(); i < n; i++) {
    const auto& s = this->_internal_method_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tiny_muduo_rpc.ListRpcResponse.method_name");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tiny_muduo_rpc.ListRpcResponse)
  return target;
}

size_t ListRpcResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tiny_muduo_rpc.ListRpcResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string service_name = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(service_name_.size());
  for (int i = 0, n = service_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      service_name_.Get(i));
  }

  // repeated string method_name = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(method_name_.size());
  for (int i = 0, n = method_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      method_name_.Get(i));
  }

  // .tiny_muduo_rpc.ErrorCode error = 1;
  if (this->_internal_error() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_error());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListRpcResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListRpcResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListRpcResponse::GetClassData() const { return &_class_data_; }

void ListRpcResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListRpcResponse *>(to)->MergeFrom(
      static_cast<const ListRpcResponse &>(from));
}


void ListRpcResponse::MergeFrom(const ListRpcResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tiny_muduo_rpc.ListRpcResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  service_name_.MergeFrom(from.service_name_);
  method_name_.MergeFrom(from.method_name_);
  if (from._internal_error() != 0) {
    _internal_set_error(from._internal_error());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListRpcResponse::CopyFrom(const ListRpcResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tiny_muduo_rpc.ListRpcResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListRpcResponse::IsInitialized() const {
  return true;
}

void ListRpcResponse::InternalSwap(ListRpcResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  service_name_.InternalSwap(&other->service_name_);
  method_name_.InternalSwap(&other->method_name_);
  swap(error_, other->error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListRpcResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rpcservice_2eproto_getter, &descriptor_table_rpcservice_2eproto_once,
      file_level_metadata_rpcservice_2eproto[1]);
}

// ===================================================================

class GetServiceRequest::_Internal {
 public:
};

GetServiceRequest::GetServiceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:tiny_muduo_rpc.GetServiceRequest)
}
GetServiceRequest::GetServiceRequest(const GetServiceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  service_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    service_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_service_name().empty()) {
    service_name_.Set(from._internal_service_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tiny_muduo_rpc.GetServiceRequest)
}

inline void GetServiceRequest::SharedCtor() {
service_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  service_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetServiceRequest::~GetServiceRequest() {
  // @@protoc_insertion_point(destructor:tiny_muduo_rpc.GetServiceRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetServiceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  service_name_.Destroy();
}

void GetServiceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetServiceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tiny_muduo_rpc.GetServiceRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  service_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetServiceRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string service_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_service_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tiny_muduo_rpc.GetServiceRequest.service_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetServiceRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tiny_muduo_rpc.GetServiceRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string service_name = 1;
  if (!this->_internal_service_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service_name().data(), static_cast<int>(this->_internal_service_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tiny_muduo_rpc.GetServiceRequest.service_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_service_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tiny_muduo_rpc.GetServiceRequest)
  return target;
}

size_t GetServiceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tiny_muduo_rpc.GetServiceRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string service_name = 1;
  if (!this->_internal_service_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetServiceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetServiceRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetServiceRequest::GetClassData() const { return &_class_data_; }

void GetServiceRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetServiceRequest *>(to)->MergeFrom(
      static_cast<const GetServiceRequest &>(from));
}


void GetServiceRequest::MergeFrom(const GetServiceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tiny_muduo_rpc.GetServiceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_service_name().empty()) {
    _internal_set_service_name(from._internal_service_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetServiceRequest::CopyFrom(const GetServiceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tiny_muduo_rpc.GetServiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServiceRequest::IsInitialized() const {
  return true;
}

void GetServiceRequest::InternalSwap(GetServiceRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &service_name_, lhs_arena,
      &other->service_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetServiceRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rpcservice_2eproto_getter, &descriptor_table_rpcservice_2eproto_once,
      file_level_metadata_rpcservice_2eproto[2]);
}

// ===================================================================

class GetServiceResponse::_Internal {
 public:
};

GetServiceResponse::GetServiceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  proto_file_(arena),
  proto_file_name_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:tiny_muduo_rpc.GetServiceResponse)
}
GetServiceResponse::GetServiceResponse(const GetServiceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      proto_file_(from.proto_file_),
      proto_file_name_(from.proto_file_name_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  error_ = from.error_;
  // @@protoc_insertion_point(copy_constructor:tiny_muduo_rpc.GetServiceResponse)
}

inline void GetServiceResponse::SharedCtor() {
error_ = 0;
}

GetServiceResponse::~GetServiceResponse() {
  // @@protoc_insertion_point(destructor:tiny_muduo_rpc.GetServiceResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetServiceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetServiceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetServiceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tiny_muduo_rpc.GetServiceResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  proto_file_.Clear();
  proto_file_name_.Clear();
  error_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetServiceResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tiny_muduo_rpc.ErrorCode error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_error(static_cast<::tiny_muduo_rpc::ErrorCode>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated string proto_file = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_proto_file();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "tiny_muduo_rpc.GetServiceResponse.proto_file"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string proto_file_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_proto_file_name();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "tiny_muduo_rpc.GetServiceResponse.proto_file_name"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetServiceResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tiny_muduo_rpc.GetServiceResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tiny_muduo_rpc.ErrorCode error = 1;
  if (this->_internal_error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_error(), target);
  }

  // repeated string proto_file = 2;
  for (int i = 0, n = this->_internal_proto_file_size(); i < n; i++) {
    const auto& s = this->_internal_proto_file(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tiny_muduo_rpc.GetServiceResponse.proto_file");
    target = stream->WriteString(2, s, target);
  }

  // repeated string proto_file_name = 3;
  for (int i = 0, n = this->_internal_proto_file_name_size(); i < n; i++) {
    const auto& s = this->_internal_proto_file_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tiny_muduo_rpc.GetServiceResponse.proto_file_name");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tiny_muduo_rpc.GetServiceResponse)
  return target;
}

size_t GetServiceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tiny_muduo_rpc.GetServiceResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string proto_file = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(proto_file_.size());
  for (int i = 0, n = proto_file_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      proto_file_.Get(i));
  }

  // repeated string proto_file_name = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(proto_file_name_.size());
  for (int i = 0, n = proto_file_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      proto_file_name_.Get(i));
  }

  // .tiny_muduo_rpc.ErrorCode error = 1;
  if (this->_internal_error() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_error());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetServiceResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetServiceResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetServiceResponse::GetClassData() const { return &_class_data_; }

void GetServiceResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetServiceResponse *>(to)->MergeFrom(
      static_cast<const GetServiceResponse &>(from));
}


void GetServiceResponse::MergeFrom(const GetServiceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tiny_muduo_rpc.GetServiceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  proto_file_.MergeFrom(from.proto_file_);
  proto_file_name_.MergeFrom(from.proto_file_name_);
  if (from._internal_error() != 0) {
    _internal_set_error(from._internal_error());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetServiceResponse::CopyFrom(const GetServiceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tiny_muduo_rpc.GetServiceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServiceResponse::IsInitialized() const {
  return true;
}

void GetServiceResponse::InternalSwap(GetServiceResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  proto_file_.InternalSwap(&other->proto_file_);
  proto_file_name_.InternalSwap(&other->proto_file_name_);
  swap(error_, other->error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetServiceResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rpcservice_2eproto_getter, &descriptor_table_rpcservice_2eproto_once,
      file_level_metadata_rpcservice_2eproto[3]);
}

// ===================================================================

RpcService::~RpcService() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* RpcService::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rpcservice_2eproto);
  return file_level_service_descriptors_rpcservice_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* RpcService::GetDescriptor() {
  return descriptor();
}

void RpcService::listRpc(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::tiny_muduo_rpc::ListRpcRequest*,
                         ::tiny_muduo_rpc::ListRpcResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method listRpc() not implemented.");
  done->Run();
}

void RpcService::getService(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::tiny_muduo_rpc::GetServiceRequest*,
                         ::tiny_muduo_rpc::GetServiceResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method getService() not implemented.");
  done->Run();
}

void RpcService::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_rpcservice_2eproto[0]);
  switch(method->index()) {
    case 0:
      listRpc(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::tiny_muduo_rpc::ListRpcRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::tiny_muduo_rpc::ListRpcResponse*>(
                 response),
             done);
      break;
    case 1:
      getService(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::tiny_muduo_rpc::GetServiceRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::tiny_muduo_rpc::GetServiceResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& RpcService::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::tiny_muduo_rpc::ListRpcRequest::default_instance();
    case 1:
      return ::tiny_muduo_rpc::GetServiceRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& RpcService::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::tiny_muduo_rpc::ListRpcResponse::default_instance();
    case 1:
      return ::tiny_muduo_rpc::GetServiceResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

RpcService_Stub::RpcService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
RpcService_Stub::RpcService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
RpcService_Stub::~RpcService_Stub() {
  if (owns_channel_) delete channel_;
}

void RpcService_Stub::listRpc(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::tiny_muduo_rpc::ListRpcRequest* request,
                              ::tiny_muduo_rpc::ListRpcResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void RpcService_Stub::getService(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::tiny_muduo_rpc::GetServiceRequest* request,
                              ::tiny_muduo_rpc::GetServiceResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace tiny_muduo_rpc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tiny_muduo_rpc::ListRpcRequest*
Arena::CreateMaybeMessage< ::tiny_muduo_rpc::ListRpcRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tiny_muduo_rpc::ListRpcRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tiny_muduo_rpc::ListRpcResponse*
Arena::CreateMaybeMessage< ::tiny_muduo_rpc::ListRpcResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tiny_muduo_rpc::ListRpcResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tiny_muduo_rpc::GetServiceRequest*
Arena::CreateMaybeMessage< ::tiny_muduo_rpc::GetServiceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tiny_muduo_rpc::GetServiceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tiny_muduo_rpc::GetServiceResponse*
Arena::CreateMaybeMessage< ::tiny_muduo_rpc::GetServiceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tiny_muduo_rpc::GetServiceResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

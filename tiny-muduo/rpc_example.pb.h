// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc_example.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_rpc_5fexample_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_rpc_5fexample_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_rpc_5fexample_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_rpc_5fexample_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rpc_5fexample_2eproto;
namespace rpc_example {
class RpcRequest;
struct RpcRequestDefaultTypeInternal;
extern RpcRequestDefaultTypeInternal _RpcRequest_default_instance_;
class RpcResponse;
struct RpcResponseDefaultTypeInternal;
extern RpcResponseDefaultTypeInternal _RpcResponse_default_instance_;
}  // namespace rpc_example
PROTOBUF_NAMESPACE_OPEN
template<> ::rpc_example::RpcRequest* Arena::CreateMaybeMessage<::rpc_example::RpcRequest>(Arena*);
template<> ::rpc_example::RpcResponse* Arena::CreateMaybeMessage<::rpc_example::RpcResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace rpc_example {

// ===================================================================

class RpcRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rpc_example.RpcRequest) */ {
 public:
  inline RpcRequest() : RpcRequest(nullptr) {}
  ~RpcRequest() override;
  explicit PROTOBUF_CONSTEXPR RpcRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RpcRequest(const RpcRequest& from);
  RpcRequest(RpcRequest&& from) noexcept
    : RpcRequest() {
    *this = ::std::move(from);
  }

  inline RpcRequest& operator=(const RpcRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RpcRequest& operator=(RpcRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RpcRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RpcRequest* internal_default_instance() {
    return reinterpret_cast<const RpcRequest*>(
               &_RpcRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RpcRequest& a, RpcRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RpcRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RpcRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RpcRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RpcRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RpcRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RpcRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RpcRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rpc_example.RpcRequest";
  }
  protected:
  explicit RpcRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamsFieldNumber = 3,
    kCallwhatFieldNumber = 1,
    kHowmanyparamsFieldNumber = 2,
  };
  // repeated int32 params = 3;
  int params_size() const;
  private:
  int _internal_params_size() const;
  public:
  void clear_params();
  private:
  int32_t _internal_params(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_params() const;
  void _internal_add_params(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_params();
  public:
  int32_t params(int index) const;
  void set_params(int index, int32_t value);
  void add_params(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      params() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_params();

  // string callwhat = 1;
  void clear_callwhat();
  const std::string& callwhat() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_callwhat(ArgT0&& arg0, ArgT... args);
  std::string* mutable_callwhat();
  PROTOBUF_NODISCARD std::string* release_callwhat();
  void set_allocated_callwhat(std::string* callwhat);
  private:
  const std::string& _internal_callwhat() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_callwhat(const std::string& value);
  std::string* _internal_mutable_callwhat();
  public:

  // int32 howmanyparams = 2;
  void clear_howmanyparams();
  int32_t howmanyparams() const;
  void set_howmanyparams(int32_t value);
  private:
  int32_t _internal_howmanyparams() const;
  void _internal_set_howmanyparams(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:rpc_example.RpcRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > params_;
  mutable std::atomic<int> _params_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr callwhat_;
  int32_t howmanyparams_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_5fexample_2eproto;
};
// -------------------------------------------------------------------

class RpcResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rpc_example.RpcResponse) */ {
 public:
  inline RpcResponse() : RpcResponse(nullptr) {}
  ~RpcResponse() override;
  explicit PROTOBUF_CONSTEXPR RpcResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RpcResponse(const RpcResponse& from);
  RpcResponse(RpcResponse&& from) noexcept
    : RpcResponse() {
    *this = ::std::move(from);
  }

  inline RpcResponse& operator=(const RpcResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RpcResponse& operator=(RpcResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RpcResponse& default_instance() {
    return *internal_default_instance();
  }
  enum OptionalSolvedCase {
    kSolved = 1,
    OPTIONAL_SOLVED_NOT_SET = 0,
  };

  enum OptionalResultCase {
    kResult = 2,
    OPTIONAL_RESULT_NOT_SET = 0,
  };

  static inline const RpcResponse* internal_default_instance() {
    return reinterpret_cast<const RpcResponse*>(
               &_RpcResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RpcResponse& a, RpcResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RpcResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RpcResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RpcResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RpcResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RpcResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RpcResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RpcResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rpc_example.RpcResponse";
  }
  protected:
  explicit RpcResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSolvedFieldNumber = 1,
    kResultFieldNumber = 2,
  };
  // bool solved = 1;
  bool has_solved() const;
  private:
  bool _internal_has_solved() const;
  public:
  void clear_solved();
  bool solved() const;
  void set_solved(bool value);
  private:
  bool _internal_solved() const;
  void _internal_set_solved(bool value);
  public:

  // int32 result = 2;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  int32_t result() const;
  void set_result(int32_t value);
  private:
  int32_t _internal_result() const;
  void _internal_set_result(int32_t value);
  public:

  void clear_optional_solved();
  OptionalSolvedCase optional_solved_case() const;
  void clear_optional_result();
  OptionalResultCase optional_result_case() const;
  // @@protoc_insertion_point(class_scope:rpc_example.RpcResponse)
 private:
  class _Internal;
  void set_has_solved();
  void set_has_result();

  inline bool has_optional_solved() const;
  inline void clear_has_optional_solved();

  inline bool has_optional_result() const;
  inline void clear_has_optional_result();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union OptionalSolvedUnion {
    constexpr OptionalSolvedUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    bool solved_;
  } optional_solved_;
  union OptionalResultUnion {
    constexpr OptionalResultUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    int32_t result_;
  } optional_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[2];

  friend struct ::TableStruct_rpc_5fexample_2eproto;
};
// ===================================================================

class RpcService_Stub;

class RpcService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline RpcService() {};
 public:
  virtual ~RpcService();

  typedef RpcService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void Solve(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::rpc_example::RpcRequest* request,
                       ::rpc_example::RpcResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(RpcService);
};

class RpcService_Stub : public RpcService {
 public:
  RpcService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  RpcService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~RpcService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements RpcService ------------------------------------------

  void Solve(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::rpc_example::RpcRequest* request,
                       ::rpc_example::RpcResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(RpcService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RpcRequest

// string callwhat = 1;
inline void RpcRequest::clear_callwhat() {
  callwhat_.ClearToEmpty();
}
inline const std::string& RpcRequest::callwhat() const {
  // @@protoc_insertion_point(field_get:rpc_example.RpcRequest.callwhat)
  return _internal_callwhat();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RpcRequest::set_callwhat(ArgT0&& arg0, ArgT... args) {
 
 callwhat_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rpc_example.RpcRequest.callwhat)
}
inline std::string* RpcRequest::mutable_callwhat() {
  std::string* _s = _internal_mutable_callwhat();
  // @@protoc_insertion_point(field_mutable:rpc_example.RpcRequest.callwhat)
  return _s;
}
inline const std::string& RpcRequest::_internal_callwhat() const {
  return callwhat_.Get();
}
inline void RpcRequest::_internal_set_callwhat(const std::string& value) {
  
  callwhat_.Set(value, GetArenaForAllocation());
}
inline std::string* RpcRequest::_internal_mutable_callwhat() {
  
  return callwhat_.Mutable(GetArenaForAllocation());
}
inline std::string* RpcRequest::release_callwhat() {
  // @@protoc_insertion_point(field_release:rpc_example.RpcRequest.callwhat)
  return callwhat_.Release();
}
inline void RpcRequest::set_allocated_callwhat(std::string* callwhat) {
  if (callwhat != nullptr) {
    
  } else {
    
  }
  callwhat_.SetAllocated(callwhat, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (callwhat_.IsDefault()) {
    callwhat_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rpc_example.RpcRequest.callwhat)
}

// int32 howmanyparams = 2;
inline void RpcRequest::clear_howmanyparams() {
  howmanyparams_ = 0;
}
inline int32_t RpcRequest::_internal_howmanyparams() const {
  return howmanyparams_;
}
inline int32_t RpcRequest::howmanyparams() const {
  // @@protoc_insertion_point(field_get:rpc_example.RpcRequest.howmanyparams)
  return _internal_howmanyparams();
}
inline void RpcRequest::_internal_set_howmanyparams(int32_t value) {
  
  howmanyparams_ = value;
}
inline void RpcRequest::set_howmanyparams(int32_t value) {
  _internal_set_howmanyparams(value);
  // @@protoc_insertion_point(field_set:rpc_example.RpcRequest.howmanyparams)
}

// repeated int32 params = 3;
inline int RpcRequest::_internal_params_size() const {
  return params_.size();
}
inline int RpcRequest::params_size() const {
  return _internal_params_size();
}
inline void RpcRequest::clear_params() {
  params_.Clear();
}
inline int32_t RpcRequest::_internal_params(int index) const {
  return params_.Get(index);
}
inline int32_t RpcRequest::params(int index) const {
  // @@protoc_insertion_point(field_get:rpc_example.RpcRequest.params)
  return _internal_params(index);
}
inline void RpcRequest::set_params(int index, int32_t value) {
  params_.Set(index, value);
  // @@protoc_insertion_point(field_set:rpc_example.RpcRequest.params)
}
inline void RpcRequest::_internal_add_params(int32_t value) {
  params_.Add(value);
}
inline void RpcRequest::add_params(int32_t value) {
  _internal_add_params(value);
  // @@protoc_insertion_point(field_add:rpc_example.RpcRequest.params)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
RpcRequest::_internal_params() const {
  return params_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
RpcRequest::params() const {
  // @@protoc_insertion_point(field_list:rpc_example.RpcRequest.params)
  return _internal_params();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
RpcRequest::_internal_mutable_params() {
  return &params_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
RpcRequest::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:rpc_example.RpcRequest.params)
  return _internal_mutable_params();
}

// -------------------------------------------------------------------

// RpcResponse

// bool solved = 1;
inline bool RpcResponse::_internal_has_solved() const {
  return optional_solved_case() == kSolved;
}
inline bool RpcResponse::has_solved() const {
  return _internal_has_solved();
}
inline void RpcResponse::set_has_solved() {
  _oneof_case_[0] = kSolved;
}
inline void RpcResponse::clear_solved() {
  if (_internal_has_solved()) {
    optional_solved_.solved_ = false;
    clear_has_optional_solved();
  }
}
inline bool RpcResponse::_internal_solved() const {
  if (_internal_has_solved()) {
    return optional_solved_.solved_;
  }
  return false;
}
inline void RpcResponse::_internal_set_solved(bool value) {
  if (!_internal_has_solved()) {
    clear_optional_solved();
    set_has_solved();
  }
  optional_solved_.solved_ = value;
}
inline bool RpcResponse::solved() const {
  // @@protoc_insertion_point(field_get:rpc_example.RpcResponse.solved)
  return _internal_solved();
}
inline void RpcResponse::set_solved(bool value) {
  _internal_set_solved(value);
  // @@protoc_insertion_point(field_set:rpc_example.RpcResponse.solved)
}

// int32 result = 2;
inline bool RpcResponse::_internal_has_result() const {
  return optional_result_case() == kResult;
}
inline bool RpcResponse::has_result() const {
  return _internal_has_result();
}
inline void RpcResponse::set_has_result() {
  _oneof_case_[1] = kResult;
}
inline void RpcResponse::clear_result() {
  if (_internal_has_result()) {
    optional_result_.result_ = 0;
    clear_has_optional_result();
  }
}
inline int32_t RpcResponse::_internal_result() const {
  if (_internal_has_result()) {
    return optional_result_.result_;
  }
  return 0;
}
inline void RpcResponse::_internal_set_result(int32_t value) {
  if (!_internal_has_result()) {
    clear_optional_result();
    set_has_result();
  }
  optional_result_.result_ = value;
}
inline int32_t RpcResponse::result() const {
  // @@protoc_insertion_point(field_get:rpc_example.RpcResponse.result)
  return _internal_result();
}
inline void RpcResponse::set_result(int32_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:rpc_example.RpcResponse.result)
}

inline bool RpcResponse::has_optional_solved() const {
  return optional_solved_case() != OPTIONAL_SOLVED_NOT_SET;
}
inline void RpcResponse::clear_has_optional_solved() {
  _oneof_case_[0] = OPTIONAL_SOLVED_NOT_SET;
}
inline bool RpcResponse::has_optional_result() const {
  return optional_result_case() != OPTIONAL_RESULT_NOT_SET;
}
inline void RpcResponse::clear_has_optional_result() {
  _oneof_case_[1] = OPTIONAL_RESULT_NOT_SET;
}
inline RpcResponse::OptionalSolvedCase RpcResponse::optional_solved_case() const {
  return RpcResponse::OptionalSolvedCase(_oneof_case_[0]);
}
inline RpcResponse::OptionalResultCase RpcResponse::optional_result_case() const {
  return RpcResponse::OptionalResultCase(_oneof_case_[1]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc_example

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_rpc_5fexample_2eproto

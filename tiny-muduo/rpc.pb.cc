// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc.proto

#include "rpc.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace tiny_muduo_rpc {
PROTOBUF_CONSTEXPR RpcMessage::RpcMessage(
    ::_pbi::ConstantInitialized)
  : id_(uint64_t{0u})
  , type_(0)

  , _oneof_case_{}{}
struct RpcMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RpcMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RpcMessageDefaultTypeInternal() {}
  union {
    RpcMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RpcMessageDefaultTypeInternal _RpcMessage_default_instance_;
}  // namespace tiny_muduo_rpc
static ::_pb::Metadata file_level_metadata_rpc_2eproto[1];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_rpc_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_rpc_2eproto = nullptr;

const uint32_t TableStruct_rpc_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tiny_muduo_rpc::RpcMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::tiny_muduo_rpc::RpcMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tiny_muduo_rpc::RpcMessage, type_),
  PROTOBUF_FIELD_OFFSET(::tiny_muduo_rpc::RpcMessage, id_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::tiny_muduo_rpc::RpcMessage, optional_service_),
  PROTOBUF_FIELD_OFFSET(::tiny_muduo_rpc::RpcMessage, optional_method_),
  PROTOBUF_FIELD_OFFSET(::tiny_muduo_rpc::RpcMessage, optional_request_),
  PROTOBUF_FIELD_OFFSET(::tiny_muduo_rpc::RpcMessage, optional_response_),
  PROTOBUF_FIELD_OFFSET(::tiny_muduo_rpc::RpcMessage, optional_error_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::tiny_muduo_rpc::RpcMessage)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::tiny_muduo_rpc::_RpcMessage_default_instance_._instance,
};

const char descriptor_table_protodef_rpc_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\trpc.proto\022\016tiny_muduo_rpc\"\235\002\n\nRpcMessa"
  "ge\022)\n\004type\030\001 \001(\0162\033.tiny_muduo_rpc.Messag"
  "eType\022\n\n\002id\030\002 \001(\006\022\021\n\007service\030\003 \001(\tH\000\022\020\n\006"
  "method\030\004 \001(\tH\001\022\021\n\007request\030\005 \001(\014H\002\022\022\n\010res"
  "ponse\030\006 \001(\014H\003\022*\n\005error\030\007 \001(\0162\031.tiny_mudu"
  "o_rpc.ErrorCodeH\004B\022\n\020optional_serviceB\021\n"
  "\017optional_methodB\022\n\020optional_requestB\023\n\021"
  "optional_responseB\020\n\016optional_error*3\n\013M"
  "essageType\022\013\n\007REQUEST\020\000\022\014\n\010RESPONSE\020\001\022\t\n"
  "\005ERROR\020\002*\201\001\n\tErrorCode\022\014\n\010NO_ERROR\020\000\022\017\n\013"
  "WRONG_PROTO\020\001\022\016\n\nNO_SERVICE\020\002\022\r\n\tNO_METH"
  "OD\020\003\022\023\n\017INVALID_REQUEST\020\004\022\024\n\020INVALID_RES"
  "PONSE\020\005\022\013\n\007TIMEOUT\020\006b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_rpc_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_rpc_2eproto = {
    false, false, 508, descriptor_table_protodef_rpc_2eproto,
    "rpc.proto",
    &descriptor_table_rpc_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_rpc_2eproto::offsets,
    file_level_metadata_rpc_2eproto, file_level_enum_descriptors_rpc_2eproto,
    file_level_service_descriptors_rpc_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_rpc_2eproto_getter() {
  return &descriptor_table_rpc_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_rpc_2eproto(&descriptor_table_rpc_2eproto);
namespace tiny_muduo_rpc {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rpc_2eproto);
  return file_level_enum_descriptors_rpc_2eproto[0];
}
bool MessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ErrorCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rpc_2eproto);
  return file_level_enum_descriptors_rpc_2eproto[1];
}
bool ErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class RpcMessage::_Internal {
 public:
};

RpcMessage::RpcMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:tiny_muduo_rpc.RpcMessage)
}
RpcMessage::RpcMessage(const RpcMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(type_));
  clear_has_optional_service();
  switch (from.optional_service_case()) {
    case kService: {
      _internal_set_service(from._internal_service());
      break;
    }
    case OPTIONAL_SERVICE_NOT_SET: {
      break;
    }
  }
  clear_has_optional_method();
  switch (from.optional_method_case()) {
    case kMethod: {
      _internal_set_method(from._internal_method());
      break;
    }
    case OPTIONAL_METHOD_NOT_SET: {
      break;
    }
  }
  clear_has_optional_request();
  switch (from.optional_request_case()) {
    case kRequest: {
      _internal_set_request(from._internal_request());
      break;
    }
    case OPTIONAL_REQUEST_NOT_SET: {
      break;
    }
  }
  clear_has_optional_response();
  switch (from.optional_response_case()) {
    case kResponse: {
      _internal_set_response(from._internal_response());
      break;
    }
    case OPTIONAL_RESPONSE_NOT_SET: {
      break;
    }
  }
  clear_has_optional_error();
  switch (from.optional_error_case()) {
    case kError: {
      _internal_set_error(from._internal_error());
      break;
    }
    case OPTIONAL_ERROR_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tiny_muduo_rpc.RpcMessage)
}

inline void RpcMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(type_));
clear_has_optional_service();
clear_has_optional_method();
clear_has_optional_request();
clear_has_optional_response();
clear_has_optional_error();
}

RpcMessage::~RpcMessage() {
  // @@protoc_insertion_point(destructor:tiny_muduo_rpc.RpcMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RpcMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_optional_service()) {
    clear_optional_service();
  }
  if (has_optional_method()) {
    clear_optional_method();
  }
  if (has_optional_request()) {
    clear_optional_request();
  }
  if (has_optional_response()) {
    clear_optional_response();
  }
  if (has_optional_error()) {
    clear_optional_error();
  }
}

void RpcMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RpcMessage::clear_optional_service() {
// @@protoc_insertion_point(one_of_clear_start:tiny_muduo_rpc.RpcMessage)
  switch (optional_service_case()) {
    case kService: {
      optional_service_.service_.Destroy();
      break;
    }
    case OPTIONAL_SERVICE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OPTIONAL_SERVICE_NOT_SET;
}

void RpcMessage::clear_optional_method() {
// @@protoc_insertion_point(one_of_clear_start:tiny_muduo_rpc.RpcMessage)
  switch (optional_method_case()) {
    case kMethod: {
      optional_method_.method_.Destroy();
      break;
    }
    case OPTIONAL_METHOD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = OPTIONAL_METHOD_NOT_SET;
}

void RpcMessage::clear_optional_request() {
// @@protoc_insertion_point(one_of_clear_start:tiny_muduo_rpc.RpcMessage)
  switch (optional_request_case()) {
    case kRequest: {
      optional_request_.request_.Destroy();
      break;
    }
    case OPTIONAL_REQUEST_NOT_SET: {
      break;
    }
  }
  _oneof_case_[2] = OPTIONAL_REQUEST_NOT_SET;
}

void RpcMessage::clear_optional_response() {
// @@protoc_insertion_point(one_of_clear_start:tiny_muduo_rpc.RpcMessage)
  switch (optional_response_case()) {
    case kResponse: {
      optional_response_.response_.Destroy();
      break;
    }
    case OPTIONAL_RESPONSE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[3] = OPTIONAL_RESPONSE_NOT_SET;
}

void RpcMessage::clear_optional_error() {
// @@protoc_insertion_point(one_of_clear_start:tiny_muduo_rpc.RpcMessage)
  switch (optional_error_case()) {
    case kError: {
      // No need to clear
      break;
    }
    case OPTIONAL_ERROR_NOT_SET: {
      break;
    }
  }
  _oneof_case_[4] = OPTIONAL_ERROR_NOT_SET;
}


void RpcMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:tiny_muduo_rpc.RpcMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(type_));
  clear_optional_service();
  clear_optional_method();
  clear_optional_request();
  clear_optional_response();
  clear_optional_error();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RpcMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tiny_muduo_rpc.MessageType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::tiny_muduo_rpc::MessageType>(val));
        } else
          goto handle_unusual;
        continue;
      // fixed64 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // string service = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_service();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tiny_muduo_rpc.RpcMessage.service"));
        } else
          goto handle_unusual;
        continue;
      // string method = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_method();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tiny_muduo_rpc.RpcMessage.method"));
        } else
          goto handle_unusual;
        continue;
      // bytes request = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_request();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes response = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_response();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tiny_muduo_rpc.ErrorCode error = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_error(static_cast<::tiny_muduo_rpc::ErrorCode>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RpcMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tiny_muduo_rpc.RpcMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tiny_muduo_rpc.MessageType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // fixed64 id = 2;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(2, this->_internal_id(), target);
  }

  // string service = 3;
  if (_internal_has_service()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service().data(), static_cast<int>(this->_internal_service().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tiny_muduo_rpc.RpcMessage.service");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_service(), target);
  }

  // string method = 4;
  if (_internal_has_method()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_method().data(), static_cast<int>(this->_internal_method().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tiny_muduo_rpc.RpcMessage.method");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_method(), target);
  }

  // bytes request = 5;
  if (_internal_has_request()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_request(), target);
  }

  // bytes response = 6;
  if (_internal_has_response()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_response(), target);
  }

  // .tiny_muduo_rpc.ErrorCode error = 7;
  if (_internal_has_error()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tiny_muduo_rpc.RpcMessage)
  return target;
}

size_t RpcMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tiny_muduo_rpc.RpcMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // fixed64 id = 2;
  if (this->_internal_id() != 0) {
    total_size += 1 + 8;
  }

  // .tiny_muduo_rpc.MessageType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  switch (optional_service_case()) {
    // string service = 3;
    case kService: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_service());
      break;
    }
    case OPTIONAL_SERVICE_NOT_SET: {
      break;
    }
  }
  switch (optional_method_case()) {
    // string method = 4;
    case kMethod: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_method());
      break;
    }
    case OPTIONAL_METHOD_NOT_SET: {
      break;
    }
  }
  switch (optional_request_case()) {
    // bytes request = 5;
    case kRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_request());
      break;
    }
    case OPTIONAL_REQUEST_NOT_SET: {
      break;
    }
  }
  switch (optional_response_case()) {
    // bytes response = 6;
    case kResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_response());
      break;
    }
    case OPTIONAL_RESPONSE_NOT_SET: {
      break;
    }
  }
  switch (optional_error_case()) {
    // .tiny_muduo_rpc.ErrorCode error = 7;
    case kError: {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_error());
      break;
    }
    case OPTIONAL_ERROR_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RpcMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RpcMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RpcMessage::GetClassData() const { return &_class_data_; }

void RpcMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RpcMessage *>(to)->MergeFrom(
      static_cast<const RpcMessage &>(from));
}


void RpcMessage::MergeFrom(const RpcMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tiny_muduo_rpc.RpcMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  switch (from.optional_service_case()) {
    case kService: {
      _internal_set_service(from._internal_service());
      break;
    }
    case OPTIONAL_SERVICE_NOT_SET: {
      break;
    }
  }
  switch (from.optional_method_case()) {
    case kMethod: {
      _internal_set_method(from._internal_method());
      break;
    }
    case OPTIONAL_METHOD_NOT_SET: {
      break;
    }
  }
  switch (from.optional_request_case()) {
    case kRequest: {
      _internal_set_request(from._internal_request());
      break;
    }
    case OPTIONAL_REQUEST_NOT_SET: {
      break;
    }
  }
  switch (from.optional_response_case()) {
    case kResponse: {
      _internal_set_response(from._internal_response());
      break;
    }
    case OPTIONAL_RESPONSE_NOT_SET: {
      break;
    }
  }
  switch (from.optional_error_case()) {
    case kError: {
      _internal_set_error(from._internal_error());
      break;
    }
    case OPTIONAL_ERROR_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RpcMessage::CopyFrom(const RpcMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tiny_muduo_rpc.RpcMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcMessage::IsInitialized() const {
  return true;
}

void RpcMessage::InternalSwap(RpcMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RpcMessage, type_)
      + sizeof(RpcMessage::type_)
      - PROTOBUF_FIELD_OFFSET(RpcMessage, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
  swap(optional_service_, other->optional_service_);
  swap(optional_method_, other->optional_method_);
  swap(optional_request_, other->optional_request_);
  swap(optional_response_, other->optional_response_);
  swap(optional_error_, other->optional_error_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
  swap(_oneof_case_[2], other->_oneof_case_[2]);
  swap(_oneof_case_[3], other->_oneof_case_[3]);
  swap(_oneof_case_[4], other->_oneof_case_[4]);
}

::PROTOBUF_NAMESPACE_ID::Metadata RpcMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace tiny_muduo_rpc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tiny_muduo_rpc::RpcMessage*
Arena::CreateMaybeMessage< ::tiny_muduo_rpc::RpcMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tiny_muduo_rpc::RpcMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
